type: json
data:
  # use the same URL as other index-related collector configs which enables caching of response data and
  # reduced overhead SPM JSON-based monitor has on the system
  # URL itself is used to provide data on which bean paths are then applied
  url: /_stats/indexing,store,search,merge,refresh,flush,docs,get,segments,recovery,completion,translog?level=shards&format=smile
  server: ${ST_MONITOR_OPENSEARCH_NODE_HOSTPORT}
  basicHttpAuthUsername: ${ST_MONITOR_OPENSEARCH_NODE_BASICAUTH_USERNAME}
  basicHttpAuthPassword: ${ST_MONITOR_OPENSEARCH_NODE_BASICAUTH_PASSWORD}
  smileFormat: true
  async: true
  # custom jsonHandlerClass (provided by Sematext) is used to optimally parse this specific response json
  jsonHandlerClass: com.sematext.spm.client.es.CustomEsShardStatsJsonHandler

require:
  - className: com.sematext.spm.client.es.EsVersionCheck
    values: 1-*

# this makes the config applicable only on data nodes - we don't want to load master and client nodes with
# stats queries which will never return any metric that could be recorded
require:
  - className: com.sematext.spm.client.es.IsDataNodeCheck
    values: true

observation:
  - name: mergeStats_total
    metricNamespace: opensearch

    # Attribute 'path' specifies set of objects which should be monitored. For each placeholder (defined with ${...}) any
    # value will be accepted (while also storing the value of that placeholder). In the example below, if some setup has
    # 3 indices (say 'A', 'B' and 'C), each with 2 shards, meaning a total of 6 shards, there will be a total of 6
    # matching objects found by this path expression (regardless off on which nodes which shards are, since total number of
    # shards is 6 anyway).
    # For each of those 6 objects, placeholder values will be available for use in tag definitions (notice how value of
    # "es.node.id" and "es.index" tags are specified - they will be resolved to exact values matching one of those 6 objects).
    path: $.indices.${indexName}.shards.${shard}[?(@.routing.node=${nodeId})].merges

    metric:
      - name: indexing.merges.total
        source: total
        type: counter
        agentAggregation: SUM
        label: merge count
        description: merge count on all (primary and replica) shards

      - name: indexing.merges.time.total
        source: total_time_in_millis
        type: counter
        agentAggregation: SUM
        label: merge time
        description: merge time on all (primary and replica) shards
        unit: ms

      - name: indexing.merges.docs.total
        source: total_docs
        type: counter
        agentAggregation: SUM
        label: merged docs count
        description: merged docs count on all (primary and replica) shards

      - name: indexing.merges.docs.size.total
        source: total_size_in_bytes
        type: counter
        agentAggregation: SUM
        label: merged docs size
        description: merged docs size on all (primary and replica) shards
        unit: bytes

      - name: indexing.merges.throttled.time.total
        source: total_throttled_time_in_millis
        type: counter
        agentAggregation: SUM
        label: throttled merge time
        description: throttled time for merges (i.e. when merges fall behind) on all (primary and replica) shards
        unit: ms

      - name: indexing.merges.throttled.size.total
        source: total_auto_throttle_in_bytes
        type: counter
        agentAggregation: SUM
        label: throttled merge size
        description: size of throttled merges on all (primary and replica) shards
        unit: bytes

    tag:
      - name: opensearch.cluster
        value: json:smile:/_cluster/health?format=smile $.cluster_name

      - name: opensearch.node.id
        value: ${nodeId}

      - name: opensearch.node
        value: json:smile:/_nodes/_local?format=smile $.nodes.${localNodeId}.name

      - name: opensearch.node.role
        value: json:smile:/_nodes/_local?format=smile $.nodes.${localNodeId}.roles return:ConcatCollection()

      - name: opensearch.index
        value: ${indexName}

    # filtering-out all non-local nodes. We allow only "nodeId" value that matches the result of specified json expression.
    # The expression itself finds the only matching object and uses value from placeholder ${localNodeId} as result. If
    # there were multiple matching objects in json received from this URL, json expression would fail (since result
    # couldn't be uniquely extracted).
    # Tag "es.node" uses similar expression, the only difference is ".name" part at the end. That expression will return
    # result that is equal to "name" property of only resulting object (again, in case of multiple matches, it would fail)

    accept:
      - name: nodeId
        value: json:smile:/_nodes/_local?format=smile $.nodes.${localNodeId} return:pathTags:localNodeId

